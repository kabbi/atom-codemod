{
  "_args": [
    [
      "react-codemod@github:rosswarren/react-codemod",
      "/Users/ross/github/codemod"
    ]
  ],
  "_from": "git://github.com/rosswarren/react-codemod.git#06cd9e486312b531cb4de2c03a4f8ec0adcc6383",
  "_id": "react-codemod@4.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/react-codemod",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/rosswarren/react-codemod/master/package.json",
      "gitUrl": "git://github.com/rosswarren/react-codemod.git",
      "httpsUrl": "git+https://github.com/rosswarren/react-codemod.git",
      "shortcut": "github:rosswarren/react-codemod",
      "ssh": "git@github.com:rosswarren/react-codemod.git",
      "sshUrl": "git+ssh://git@github.com/rosswarren/react-codemod.git",
      "type": "github"
    },
    "name": "react-codemod",
    "raw": "react-codemod@github:rosswarren/react-codemod",
    "rawSpec": "github:rosswarren/react-codemod",
    "scope": null,
    "spec": "github:rosswarren/react-codemod",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/rosswarren/react-codemod.git#06cd9e486312b531cb4de2c03a4f8ec0adcc6383",
  "_shasum": "a20e2a5ea5bffa41849278940a161b5c7f83c910",
  "_shrinkwrap": null,
  "_spec": "react-codemod@github:rosswarren/react-codemod",
  "_where": "/Users/ross/github/codemod",
  "bugs": {
    "url": "https://github.com/reactjs/react-codemod/issues"
  },
  "dependencies": {},
  "description": "React codemod scripts",
  "devDependencies": {
    "babel-eslint": "^5.0.0",
    "babel-jest": "^9.0.2",
    "babel-plugin-transform-object-rest-spread": "^6.6.5",
    "babel-preset-es2015": "^6.6.0",
    "eslint": "^1.7.3",
    "fbjs-scripts": "^0.5.0",
    "jest-cli": "^0.9.1",
    "jscodeshift": "^0.3.20"
  },
  "gitHead": "06cd9e486312b531cb4de2c03a4f8ec0adcc6383",
  "homepage": "https://github.com/reactjs/react-codemod#readme",
  "jest": {
    "automock": false,
    "globals": {
      "baseDir": "../"
    },
    "testPathDirs": [
      "transforms/__tests__"
    ]
  },
  "license": "BSD-3-Clause",
  "name": "react-codemod",
  "optionalDependencies": {},
  "readme": "## react-codemod [![Build Status](https://travis-ci.org/reactjs/react-codemod.svg)](https://travis-ci.org/reactjs/react-codemod)\n\nThis repository contains a collection of codemod scripts based for use with\n[JSCodeshift](https://github.com/facebook/jscodeshift) that help update React\nAPIs.\n\n### Setup & Run\n\n  * `npm install -g jscodeshift`\n  * `git clone https://github.com/reactjs/react-codemod.git` or download a zip file\n    from `https://github.com/reactjs/react-codemod/archive/master.zip`\n  * `jscodeshift -t <codemod-script> <path>`\n  * Use the `-d` option for a dry-run and use `-p` to print the output\n    for comparison\n\n### Included Scripts\n\n#### `class`\n\nTransforms `React.createClass` calls into ES2015 classes.\n\n```sh\njscodeshift -t react-codemod/transforms/class.js <path>\n```\n\n  * If `--no-super-class` is specified it will not extend\n    `React.Component` if `setState` and `forceUpdate` aren't being called in a\n    class. We do recommend always extending from `React.Component`, especially\n    if you are using or planning to use [Flow](http://flowtype.org/). Also make\n    sure you are not calling `setState` anywhere outside of your component.\n\n#### `create-element-to-jsx`\n\nConverts calls to `React.createElement` into JSX elements.\n\n```sh\njscodeshift -t react-codemod/transforms/create-element-to-jsx.js <path>\n```\n\n#### `findDOMNode`\n\nUpdates `this.getDOMNode()` or `this.refs.foo.getDOMNode()` calls inside of\n`React.createClass` components to `React.findDOMNode(foo)`. Note that it will\nonly look at code inside of `React.createClass` calls and only update calls on\nthe component instance or its refs. You can use this script to update most calls\nto `getDOMNode` and then manually go through the remaining calls.\n\n```sh\njscodeshift -t react-codemod/transforms/findDOMNode.js <path>\n```\n\n#### `pure-component`\n\n```sh\njscodeshift -t react-codemod/transforms/pure-component.js <path>\n```\n\n#### `pure-render-mixin`\n\nRemoves `PureRenderMixin` and inlines `shouldComponentUpdate` so that the ES2015\nclass transform can pick up the React component and turn it into an ES2015\nclass. NOTE: This currently only works if you are using the master version\n(>0.13.1) of React as it is using `React.addons.shallowCompare`\n\n```sh\njscodeshift -t react-codemod/transforms/pure-render-mixin.js <path>\n```\n\n * If `--mixin-name=<name>` is specified it will look for the specified name\n   instead of `PureRenderMixin`. Note that it is not possible to use a\n   namespaced name for the mixin. `mixins: [React.addons.PureRenderMixin]` will\n   not currently work.\n\n#### `react-to-react-dom`\n\nUpdates code for the split of the `react` and `react-dom` packages (e.g.,\n`React.render` to `ReactDOM.render`). It looks for `require('react')` and\nreplaces the appropriate property accesses using `require('react-dom')`. It does\nnot support ES6 modules or other non-CommonJS systems. We recommend performing\nthe `findDOMNode` conversion first.\n\n```sh\njscodeshift -t react-codemod/transforms/react-to-react-dom.js <path>\n```\n\n  * After running the automated codemod, you may want to run a regex-based\n    find-and-replace to remove extra whitespace between the added requires, such\n    as `codemod.py -m -d src --extensions js '(var\n    React\\s*=\\s*require\\(.react.\\);)\\n\\n(\\s*var ReactDOM)' '\\1\\n\\2'` using\n    https://github.com/facebook/codemod.\n\n#### `sort-comp`\n\nReorders React component methods to match the [ESLint](http://eslint.org/)\n[react/sort-comp\nrule](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-comp.md),\nspecifically with the [tighter constraints of the Airbnb style\nguide](https://github.com/airbnb/javascript/blob/7684892951ef663e1c4e62ad57d662e9b2748b9e/packages/eslint-config-airbnb/rules/react.js#L122-L134).\n\n```sh\njscodeshift -t react-codemod/transforms/sort-comp.js <path>\n```\n\n### Explanation of the ES2015 class transform\n\n  * Ignore components with calls to deprecated APIs. This is very defensive, if\n    the script finds any identifiers called `isMounted`, `getDOMNode`,\n    `replaceProps`, `replaceState` or `setProps` it will skip the component.\n  * Replaces `var A = React.createClass(spec)` with\n    `class A (extends React.Component) {spec}`.\n  * Pulls out all statics defined on `statics` plus the few special cased\n    statics like `propTypes`, `childContextTypes`, `contextTypes` and\n    `displayName` and assigns them after the class is created.\n    `class A {}; A.foo = bar;`\n  * Takes `getDefaultProps` and inlines it as a static `defaultProps`.\n    If `getDefaultProps` is defined as a function with a single statement that\n    returns an object, it optimizes and transforms\n    `getDefaultProps() { return {foo: 'bar'}; }` into\n    `A.defaultProps = {foo: 'bar'};`. If `getDefaultProps` contains more than\n    one statement it will transform into a self-invoking function like this:\n    `A.defaultProps = function() {…}();`. Note that this means that the function\n    will be executed only a single time per app-lifetime. In practice this\n    hasn't caused any issues – `getDefaultProps` should not contain any\n    side-effects.\n  * Binds class methods to the instance if methods are referenced without being\n    called directly. It checks for `this.foo` but also traces variable\n    assignments like `var self = this; self.foo`. It does not bind functions\n    from the React API and ignores functions that are being called directly\n    (unless it is both called directly and passed around to somewhere else)\n  * Creates a constructor if necessary. This is necessary if either\n    `getInitialState` exists in the `React.createClass` spec OR if functions\n    need to be bound to the instance.\n  * When `--no-super-class` is passed it only optionally extends\n    `React.Component` when `setState` or `forceUpdate` are used within the\n    class.\n\nThe constructor logic is as follows:\n\n  * Call `super(props, context)` if the base class needs to be extended.\n  * Bind all functions that are passed around,\n    like `this.foo = this.foo.bind(this)`\n  * Inline `getInitialState` (and remove `getInitialState` from the spec). It\n    also updates access of `this.props.foo` to `props.foo` and adds `props` as\n    argument to the constructor. This is necessary in the case when the base\n    class does not need to be extended where `this.props` will only be set by\n    React after the constructor has been run.\n  * Changes `return StateObject` from `getInitialState` to assign `this.state`\n    directly.\n\n### Recast Options\n\nOptions to [recast](https://github.com/benjamn/recast)'s printer can be provided\nthrough the `printOptions` command line argument\n\n```sh\njscodeshift -t transform.js <path> --printOptions='{\"quote\":\"double\"}'\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/reactjs/react-codemod.git"
  },
  "scripts": {
    "lint": "eslint .",
    "test": "f() { EXIT=0; npm run lint || EXIT=$?; NODE_ENV=test jest $@ || EXIT=$?; exit $EXIT; }; f"
  },
  "version": "4.0.0"
}
